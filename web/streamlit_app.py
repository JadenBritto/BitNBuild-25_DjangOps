# web/streamlit_app.py
import streamlit as st
import requests 
import json
import pandas as pd
import io
import os
from typing import List, Dict

# -------- CONFIG --------
API_BASE = st.secrets.get("API_BASE", "http://127.0.0.1:8000/api")  # change if backend hosted elsewhere
ANALYZE_URL = f"{API_BASE}/analyze/"
COMPARE_URL = f"{API_BASE}/compare/"

# local example JSON fallback files (generated by ML lead)
EXAMPLE_GOOD = os.path.join("..", "data", "example_good.json")
EXAMPLE_BAD  = os.path.join("..", "data", "example_bad.json")
EXAMPLE_COMPARE = os.path.join("..", "data", "example_compare.json")

st.set_page_config(page_title="Review Radar", layout="wide")

# -------- Helpers --------
def call_analyze(reviews: List[str]) -> Dict:
    payload = {"reviews": reviews}
    try:
        r = requests.post(ANALYZE_URL, json=payload, timeout=20)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        st.error(f"Analyze API error: {e}")
        return {}

def call_compare(a: List[str], b: List[str]) -> Dict:
    payload = {"a": a, "b": b}
    try:
        r = requests.post(COMPARE_URL, json=payload, timeout=30)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        st.error(f"Compare API error: {e}")
        return {}

def load_demo(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def reviews_from_csv_bytes(bytes_io) -> List[str]:
    try:
        df = pd.read_csv(io.BytesIO(bytes_io))
        # try common column names
        for col in ["review", "text", "review_text", "content"]:
            if col in df.columns:
                return df[col].dropna().astype(str).tolist()
        # fallback: first column
        return df.iloc[:,0].dropna().astype(str).tolist()
    except Exception as e:
        st.error(f"CSV parse error: {e}")
        return []

def show_overview(result: Dict, exclude_flagged: bool):
    meta = result.get("meta", {})
    st.metric("Reviews analyzed", meta.get("n_reviews", 0))
    st.metric("Flagged (AI-like)", meta.get("n_flagged", 0))

    # Sentiment pie
    sc = result.get("sentiment_counts", {})
    sc_df = pd.DataFrame(list(sc.items()), columns=["sentiment","count"])
    if not sc_df.empty:
        st.subheader("Sentiment distribution")
        st.altair_chart(
            st.vega_lite_chart(sc_df, {
                "mark": "arc",
                "encoding": {
                    "theta": {"field": "count", "type": "quantitative"},
                    "color": {"field": "sentiment", "type": "nominal"}
                }
            }), use_container_width=True
        )

    # keywords
    st.subheader("Top keywords")
    cols = st.columns(3)
    cols[0].write("Top")
    cols[0].write(result.get("top_keywords", []))
    cols[1].write("Positive")
    cols[1].write(result.get("positive_keywords", []))
    cols[2].write("Negative")
    cols[2].write(result.get("negative_keywords", []))

def show_aspects(result: Dict):
    st.subheader("Aspect stats")
    aspect_stats = result.get("aspect_stats", {})
    if not aspect_stats:
        st.write("No aspect data.")
        return
    df = pd.DataFrame.from_dict(aspect_stats, orient="index")
    df = df[["mentions","pos_pct","neg_pct"]]
    st.dataframe(df)

    # recommendations
    recs = result.get("recommendations", [])
    if recs:
        st.subheader("Recommendations")
        for rec in recs:
            st.info(f"{rec.get('aspect')}: {rec.get('action')}")

def show_reviews_table(result: Dict, max_rows: int = 200):
    st.subheader("Reviews (sample)")
    reviews = result.get("reviews", [])[:max_rows]
    if not reviews:
        st.write("No reviews to show.")
        return
    df = pd.DataFrame(reviews)
    # render flag as text for sorting
    df["flag"] = df["flag"].astype(bool)
    st.dataframe(df)

def export_result_csv(result: Dict):
    csv_bytes = io.StringIO()
    reviews = result.get("reviews", [])
    if not reviews:
        st.warning("No reviews to export.")
        return
    df = pd.DataFrame(reviews)
    df.to_csv(csv_bytes, index=False)
    st.download_button("Download CSV (per-review)", data=csv_bytes.getvalue(), file_name="review_analysis.csv", mime="text/csv")

# -------- UI Layout --------
st.title("Review Radar â€” Insights from Reviews")
left, right = st.columns([1,2])

with left:
    mode = st.radio("Input mode", ["Paste reviews", "Upload CSV", "Demo: Good", "Demo: Bad"], index=2)
    reviews = []
    if mode == "Paste reviews":
        raw = st.text_area("Paste reviews (one per line)", height=200)
        if raw:
            reviews = [r.strip() for r in raw.splitlines() if r.strip()]
    elif mode == "Upload CSV":
        uploaded = st.file_uploader("Upload CSV (first column used if no header)", type=["csv"])
        if uploaded:
            reviews = reviews_from_csv_bytes(uploaded.read())
    elif mode == "Demo: Good":
        demo = load_demo(EXAMPLE_GOOD)
        if demo:
            reviews = [r.get("text") for r in demo.get("reviews", [])]
        else:
            st.warning("Demo file not found. Generate example JSON from backend (ml lead).")
    elif mode == "Demo: Bad":
        demo = load_demo(EXAMPLE_BAD)
        if demo:
            reviews = [r.get("text") for r in demo.get("reviews", [])]
        else:
            st.warning("Demo file not found. Generate example JSON from backend (ml lead).")

    st.write(f"Loaded reviews: {len(reviews)}")
    analyze_btn = st.button("Analyze")

    st.markdown("---")
    st.checkbox("Exclude flagged reviews from aggregates", value=True, key="exclude_flagged")

    st.markdown("**Compare**")
    if st.button("Load Compare UI"):
        st.session_state["show_compare"] = True

with right:
    if analyze_btn:
        if not reviews:
            st.warning("No reviews provided.")
        else:
            with st.spinner("Calling backend analyze endpoint..."):
                result = call_analyze(reviews)
            if result:
                exclude_flagged = st.session_state.get("exclude_flagged", True)
                # if excluding flagged, filter reviews and call summarize locally?
                if exclude_flagged:
                    # recompute summaries/aggregates client side by removing flagged reviews
                    unflagged = [r for r in result.get("reviews", []) if not r.get("flag", False)]
                    # prepare a reduced payload and show both summaries
                    st.subheader("Summary (All reviews)")
                    st.write(result.get("summary_all"))
                    st.subheader("Summary (Excluding flagged)")
                    if unflagged:
                        st.write(result.get("summary_excluding_flagged"))
                    else:
                        st.write("No unflagged reviews to summarize.")
                else:
                    st.subheader("Summary (All reviews)")
                    st.write(result.get("summary_all"))

                show_overview(result, exclude_flagged)
                show_aspects(result)
                show_reviews_table(result)
                export_result_csv(result)
                # save example json for frontend debug
                if st.button("Save example JSON locally"):
                    fname = "example_saved.json"
                    with open(fname, "w", encoding="utf-8") as f:
                        json.dump(result, f, indent=2, ensure_ascii=False)
                    st.success(f"Wrote {fname}")

    # Compare UI (toggleable)
    if st.session_state.get("show_compare", False):
        st.markdown("---")
        st.subheader("Compare two sets of reviews")
        col_a, col_b = st.columns(2)
        with col_a:
            a_mode = st.radio("A: Input type", ["Paste", "Upload CSV", "Demo Good"])
            if a_mode == "Paste":
                a_text = st.text_area("Paste reviews for A (one per line)", key="a_text")
                reviews_a = [r.strip() for r in a_text.splitlines() if r.strip()]
            elif a_mode == "Upload CSV":
                a_up = st.file_uploader("Upload CSV A", key="a_csv")
                reviews_a = reviews_from_csv_bytes(a_up.read()) if a_up else []
            else:
                demo = load_demo(EXAMPLE_GOOD)
                reviews_a = [r.get("text") for r in demo.get("reviews", [])] if demo else []
        with col_b:
            b_mode = st.radio("B: Input type", ["Paste", "Upload CSV", "Demo Bad"])
            if b_mode == "Paste":
                b_text = st.text_area("Paste reviews for B (one per line)", key="b_text")
                reviews_b = [r.strip() for r in b_text.splitlines() if r.strip()]
            elif b_mode == "Upload CSV":
                b_up = st.file_uploader("Upload CSV B", key="b_csv")
                reviews_b = reviews_from_csv_bytes(b_up.read()) if b_up else []
            else:
                demo = load_demo(EXAMPLE_BAD)
                reviews_b = [r.get("text") for r in demo.get("reviews", [])] if demo else []

        if st.button("Compare now"):
            if not reviews_a or not reviews_b:
                st.warning("Provide reviews for both A and B.")
            else:
                with st.spinner("Calling backend compare endpoint..."):
                    comp = call_compare(reviews_a, reviews_b)
                if comp:
                    st.subheader("Compare verdict")
                    st.write(comp.get("verdict"))
                    st.subheader("Aspect deltas")
                    deltas = comp.get("deltas", {})
                    df = pd.DataFrame(list(deltas.items()), columns=["aspect","pos_pct_delta"])
                    st.dataframe(df.sort_values("pos_pct_delta", key=lambda s: s.abs(), ascending=False))
                    st.subheader("Product A summary (excl flagged)")
                    st.write(comp.get("a", {}).get("summary_excluding_flagged"))
                    st.subheader("Product B summary (excl flagged)")
                    st.write(comp.get("b", {}).get("summary_excluding_flagged"))
                    # provide download
                    st.download_button("Download compare JSON", json.dumps(comp, indent=2), file_name="compare.json")
